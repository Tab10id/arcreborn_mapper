// Author: cvet
#include "_macros.fos"
#include "_msgstr.fos"
#ifdef __CLIENT
#include "_client_defines.fos"
#include "arc_iface_defines.fos"

import void ArcMessage( int messageid ) from "arc_showmessage";
import void SetChosenTabLevelUp( bool enable )  from "chosen_tabs";
import int  GUI_GetActiveScreen() from "client_gui";
#endif

#ifndef __CLIENT
void changedParam_Hp( Critter& cr, uint, int oldValue )
{
    int curHp = cr.StatBase[ ST_CURRENT_HP ];
    if( curHp <= 0 && cr.IsLife() )
        cr.StatBase[ ST_CURRENT_HP ] = 1;
    if( curHp < __DeadHitPoints && not cr.IsDead() )
        cr.StatBase[ ST_CURRENT_HP ] = __DeadHitPoints + 1;
    if( curHp > cr.Stat[ ST_MAX_LIFE ] )
        cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
}

void changedParam_Experience( Critter& cr, uint, int oldValue )
{
    int exp = cr.StatBase[ ST_EXPERIENCE ] - oldValue;
    if( exp > 0 )
    {
        uint level = cr.Stat[ ST_LEVEL ];
        if( level >= __LevelCap && not __LevelCapAddExperience )
            return;

        cr.StatBase[ ST_EXPERIENCE ] = oldValue + exp;

        if( level >= __LevelCap )
            return;

        while( true )
        {
            if( cr.StatBase[ ST_EXPERIENCE ] >= NextLevelNeedExp( cr ) )
            {
                level++;
                cr.StatBase[ ST_LEVEL ]++;

                cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 1;                        // Skill points
                if(level%5==0)
                cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 2;
                if( cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] > 99 )
                    cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] = 99;                                                      // Clamp skill points
            }
            else
                break;
        }
    }
}

void changedParam_Hide( Critter& cr, uint, int oldValue )
{
    cr.RefreshVisible();
}

void changedParam_FastShot( Critter& cr, uint, int oldValue )
{
    cr.ModeBase[ MODE_NO_AIM ] = ( cr.Trait[ TRAIT_FAST_SHOT ] != 0 ? 1 : 0 );
}

#define NextLevelNeedExpFunc                     # (level) (1300000 + 71000*(level-50) + 3000 * ((level-50)*(level-49)/2))

int NextLevelNeedExpTable(int level)
{
        int[] NextLevel={2100, 4600, 7700, 11400, 15500, 20300, 25600, 31600, 38300, 45600, 53600, 62400, 71900, 82200, 93300, 105300, 118200, 132000, 146700, 162500, 179300, 197200, 216300, 236500, 257900, 280600, 304600, 330000, 356800, 385100, 414900, 446300, 479500, 514300, 551000, 589500, 630000, 672500, 717100, 764000, 813100, 864600, 918500, 975000, 1034200, 1096200, 1161100, 1229000, 1300000};
        return NextLevel[level];
}

int NextLevelNeedExp( Critter& cr ) // Export
{
    int level = cr.Stat[ ST_LEVEL ];
    if (level<=50)
    {
        return NextLevelNeedExpTable(level);
    }
    else
    {
        return NextLevelNeedExpFunc(level);
    }
    
}


int getParamDialog_Intellect( Critter@ master, Critter@ slave, uint index )
{

    if( valid( master ) )
    {
        return master.Stat[ ST_INTELLECT ] + 2;
    }
    return 0;
}

int getParamDialog_Reputation( Critter@ master, Critter@ slave, uint index )
{
    if( valid( master ) )
    {
        if( master.ReputationBase[ index ] == int(0x80000000) )
            master.ReputationBase[ index ] = 0;
        return master.ReputationBase[ index ];
    }
    return 0;
}
#endif

#ifdef __CLIENT
void changedParam_Level( CritterCl& cr, uint, int oldValue )
{
    if( cr.ParamBase[ ST_LEVEL ] > oldValue )
    {
        PlaySound( "LEVEL_UP.WAV" );
        Message( TEXTMSG_GAME, STR_GAIN_LEVELUP, FOMB_GAME );
        SetChosenTabLevelUp( true );
    }
}

void changedParam_Experience( CritterCl& cr, uint, int oldValue )
{
    int curValue = cr.ParamBase[ ST_EXPERIENCE ];
    if( curValue > oldValue )
        Message( ReplaceText( GetMsgStr( TEXTMSG_GAME, STR_GAIN_EXPERIENCE ), "VALUE", curValue - oldValue ), FOMB_GAME );
}

void changedParam_UnspentPerks( CritterCl& cr, uint, int oldValue )
{
    if( cr.ParamBase[ ST_UNSPENT_PERKS ] > 0 && GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER )
        ShowScreen( CLIENT_SCREEN_PERK, 0, 0, 0 );
}
#endif

// Parameters generation
// For server and client
// Both generation need be equal
// Input for player: 7 special, 3 tag skills, 2 traits, age, gender
// Imput for npc: data from prototype
#ifndef __CLIENT
# define _param_    cr.ParamBase
void CritterGenerate( Critter& cr ) // Export to main@critter_init
#endif
#ifdef __CLIENT
# define _param_    data
void CritterGenerate( int[]& data ) // Export to client_main@player_data_generate
#endif
{
    if( _param_[ ST_LEVEL ] <= 0 )
        _param_[ ST_LEVEL ] = 1;

    #ifdef __CLIENT
        // Runtime calculations, only for client registration
        _param_[ ST_ARMOR_CLASS ] += _param_[ ST_DEXTERITY ];
        _param_[ ST_ACTION_POINTS ] += _param_[ ST_DEXTERITY ] / 2; 
        _param_[ ST_CARRY_WEIGHT ] += STONE_TO_GRAMM( 25 + _param_[ ST_STRENGTH ] * ( 25 ) );
        _param_[ ST_MELEE_DAMAGE ] += ( _param_[ ST_STRENGTH ] > 6 ? _param_[ ST_STRENGTH ] - 5 : 1 );
        _param_[ ST_POISON_RESISTANCE ] += _param_[ ST_ENDURANCE_DONT_USE ] * 5;
        _param_[ ST_RADIATION_RESISTANCE ] += _param_[ ST_ENDURANCE_DONT_USE ] * 2;
        _param_[ ST_SEQUENCE ] += _param_[ ST_PERCEPTION ] * 2;
        _param_[ ST_HEALING_RATE ] += ( _param_[ ST_CONSTITUTION ] + 1 ) / 3 ;
    #endif

    _param_[ ST_ACTION_POINTS ] += 5;
    _param_[ ST_CURRENT_HP ] = _param_[ ST_MAX_LIFE ];
    _param_[ ST_CURRENT_AP ] = _param_[ ST_ACTION_POINTS ] * 100;
}

#ifdef __CLIENT
# include "_msgstr.fos"
// Check valid of input data
bool CritterGenerateCheck( int[]& data ) // Export to client_main@player_data_check
{
    if( data[ ST_FREE_POINTS ] != 0 )
    {
        ArcMessage( SM_CRIT_GEN_ERROR );
        return false;
    }
    return true;
}
#endif

#ifndef __CLIENT
void NpcProcessLevel( Critter& npc ) // Export
{
    for( int i = 0, j = npc.Stat[ ST_LEVEL ]; i < j; i++ )
    {
        // Todo: ...
        // npc.StatBase[ST_MAX_LIFE]+=10;
    }
}
#endif

uint CheckPlayerName( const string& name )
{
    // Length
    if( name.length() < __MinNameLength || name.length() > __MaxNameLength )
        return STR_NET_LOGINPASS_WRONG;

    // Valid letters
    string allLetters = __ValidNameLettersCommon + __ValidNameLettersCulture1 + __ValidNameLettersCulture2;
    for( uint i = 0, j = name.length(); i < j; i++ )
        if( findFirst( allLetters, name[ i ] ) == -1 )
            return STR_NET_PASS_WRONG_CHARS;

    // Spaces
    if( name[ 0 ] == " " || name[ -1 ] == " " )
        return STR_NET_BEGIN_END_SPACES;
    for( int i = 0, j = name.length() - 1; i < j; i++ )
        if( name[ i ] == " " && name[ i + 1 ] == " " )
            return STR_NET_TWO_SPACE;

    // Different cultures
    uint letters1 = 0;
    uint letters2 = 0;
    for( int i = 0, j = name.length() - 1; i < j; i++ )
    {
        if( findFirst( __ValidNameLettersCulture1, name[ i ] ) != -1 )
            letters1++;
        else if( findFirst( __ValidNameLettersCulture2, name[ i ] ) != -1 )
            letters2++;
    }
    if( letters1 > 0 && letters2 > 0 )
        return STR_NET_DIFFERENT_LANG;

    // Too many common symbols
    if( ( letters1 + letters2 ) * 100 / name.length() < 70 )
        return STR_NET_MANY_SYMBOLS;

    // All fine, return zero
    return 0;
}