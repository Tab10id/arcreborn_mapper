// Game configuration, for server/client/mapper, call in start functions

#include "_defines.fos"
#include "_animation.fos"

#ifndef __COMPILER

// /
// / Server and client initialization
// /

# ifndef __MAPPER

#  include "_time.fos"

void InitializeGame()                    // Export
{
    // / Init global vars
    __ScriptRunSuspendTimeout   = 10000; // In milliseconds
    __ScriptRunMessageTimeout   = 5000;  // In milliseconds
    __LoggingVars               = false;
    __DisableTcpNagle           = true;
    __DisableZlibCompression    = false;
    __FloodSize                 = 2048;     // In bytes
    __NoAnswerShuffle           = false;
    __FixBoyDefaultExperience   = 200;
    __SneakDivider              = 2;
    __LevelCap                  = 50;
    __LevelCapAddExperience     = true;
    __LookNormal                = 25;
    __LookMinimum               = 3;
    __CritterIdleTick           = 10000;
    __TurnBasedTick             = 30000;
    __Breaktime                 = 1200;
    __TimeoutTransfer           = 0;
    __TimeoutBattle             = REAL_SECOND( 3 );
    __ApRegeneration            = 6000;
    __RtApCostCritterWalk       = 0;     // 1 AP == 100, maximim 255
    __RtApCostCritterRun        = 0;     // 1 AP == 100, maximim 255
    __RtApCostMoveItemContainer = 0;
    __RtApCostMoveItemInventory = 2;
    __RtApCostPickItem          = 0;
    __RtApCostDropItem          = 0;
    __RtApCostReloadWeapon      = 0;
    __RtApCostPickCritter       = 1;
    __RtApCostUseItem           = 2;
    __RtApCostUseSkill          = 2;
    __RtAlwaysRun               = true;
    __TbApCostCritterMove       = 1;
    __TbApCostMoveItemContainer = 0;
    __TbApCostMoveItemInventory = 2;
    __TbApCostPickItem          = 3;
    __TbApCostDropItem          = 2;
    __TbApCostReloadWeapon      = 2;
    __TbApCostPickCritter       = 3;
    __TbApCostUseItem           = 3;
    __TbApCostUseSkill          = 3;
    __TbAlwaysRun               = false;
    __ApCostAimEyes             = 1;
    __ApCostAimHead             = 1;
    __ApCostAimGroin            = 1;
    __ApCostAimTorso            = 1;
    __ApCostAimArms             = 1;
    __ApCostAimLegs             = 1;
    __HitAimEyes                = 60;
    __HitAimHead                = 40;
    __HitAimGroin               = 30;
    __HitAimTorso               = 0;
    __HitAimArms                = 30;
    __HitAimLegs                = 20;
    __RunOnCombat               = true;
    __RunOnTransfer             = true;
    __GlobalMapWidth            = 42;     // Maximum 100
    __GlobalMapHeight           = 38;     // Maximum 100
    __GlobalMapZoneLength       = 50;     // Maximum 500
    __GlobalMapMaxGroupCount    = 10;
    __GlobalMapMoveTime         = 250;
    __EncounterTime             = 5000;
    __DeadHitPoints             = 0;
    __BagRefreshTime            = 60;     // Real minutes
    __WisperDist                = 2;
    __ShoutDist                 = 400;
    __CustomItemCost            = false;
    __RegistrationTimeout       = 0;         // In real seconds, 0 to disable
    __AccountPlayTime           = 0;         // In real seconds, 0 to disable
    __TalkDistance              = 3;
    __NpcMaxTalkers             = 1;
    __MinNameLength             = 4;         // Minimum 1
    __MaxNameLength             = 30;        // Maximum 30
    __PermanentDeath            = 0;         // Disable
    __DlgTalkMinTime            = 100000;
    __DlgBarterMinTime          = 100000;
    __MinimumOfflineTime        = 180000;    // 3 minutes

    // Look modifiers
    __LookChecks = 0;                        // See Look checks in _defines.fos
    // __LookChecks |= LOOK_CHECK_DIR; // Nerfe look by directions of look
    __LookDir0 =  0;                         // Nerfe 0% of look radius with direct look
    __LookDir1 = 20;                         // Nerfe 20% of look radius with front side look
    __LookDir2 = 40;                         // Nerfe 40% of look radius with back side look
    __LookDir3 = 60;                         // Nerfe 60% of look radius with back look
    __LookDir4 = 60;                         // Nerfe 60% of look radius with back look (Square geometry)
    // __LookChecks |= LOOK_CHECK_SNEAK_DIR; // Nerfe opponent sneak by directions of look
    __LookSneakDir0 = 90;                    // Nerfe 90% of opponent sneak with direct look
    __LookSneakDir1 = 60;                    // Nerfe 60% of opponent sneak with front side look
    __LookSneakDir2 = 30;                    // Nerfe 30% of opponent sneak with back side look
    __LookSneakDir3 =  0;                    // Nerfe 0% of opponent sneak with back look
    __LookSneakDir4 =  0;                    // Nerfe 0% of opponent sneak with back look (Square geometry)
    __LookChecks |= LOOK_CHECK_SNEAK_WEIGHT; // Nerfe sneak by current weight
    __LookWeight = 10;                       // Lost 1 sneak point per 10 gramm
    // __LookChecks |= LOOK_CHECK_TRACE; // Tracing for wall aviablility
    // __LookChecks |= LOOK_CHECK_SCRIPT; // Allow bool check_look(...) in main.fos, all other defines ignored
    // __LookChecks |= LOOK_CHECK_ITEM_SCRIPT; // Allow bool check_trap_look(...) in main.fos, for items with ITEM_TRAP flag

    // Range of values for client engine
    __AbsoluteOffsets = true;
    __SkillBegin      = 200;
    __SkillEnd        = 217;
    __TimeoutBegin    = 230;
    __TimeoutEnd      = 249;
    __KillBegin       = 260;
    __KillEnd         = 280;
    __PerkBegin       = 300;
    __PerkEnd         = 469;
    __AddictionBegin  = 470;
    __AddictionEnd    = 476;
    __KarmaBegin      = 480;
    __KarmaEnd        = 497;
    __DamageBegin     = 500;
    __DamageEnd       = 506;
    __TraitBegin      = 550;
    __TraitEnd        = 565;
    __ReputationBegin = 570;
    __ReputationEnd   = 599;

    // Compare with >=
    __ReputationLoved     =  30;
    __ReputationLiked     =  15;
    __ReputationAccepted  =   1;
    __ReputationNeutral   =   0;
    __ReputationAntipathy = -14;
    __ReputationHated     = -29;
    // Other is Vilified

    // Registation values
    __StartSpecialPoints  = 40;
    __StartTagSkillPoints = 3;

    // Skill modifiers
    __SkillMaxValue = 300;
    __SkillModAdd2  = 100;
    __SkillModAdd3  = 125;
    __SkillModAdd4  = 150;
    __SkillModAdd5  = 175;
    __SkillModAdd6  = 200;

    // / Client specific definitions
    #  ifdef __CLIENT
    __RoofAlpha             = 200;
    __HideCursor            = false;
    __DisableLMenu          = false;
    __DisableMouseEvents    = false;
    __DisableKeyboardEvents = false;
    __HidePassword          = true;
    __PlayerOffAppendix     = "|0x44ffffff  (off)";
    __SpritesZoomMax        = 2.5f;
    __SpritesZoomMin        = 0.2f;
    // __AlwaysRun Specifed in config
    __AlwaysRunMoveDist     = 1;
    __AlwaysRunUseDist      = 5;
    __CritterFidgetTime     = 50000;
    __Anim2CombatBegin      = ANIM2_BEGIN_COMBAT;
    __Anim2CombatIdle       = ANIM2_IDLE_COMBAT;
    __Anim2CombatEnd        = ANIM2_END_COMBAT;

    // Next vars defined in client config file, if you want override it, than uncomment need vars
    // __Animation3dSmoothTime = 250; // In milliseconds
    // __Animation3dFPS        = 0;   // Zero to disable and use Smoothing
    #  endif

    // / Parameters behavoiours
    #  ifndef __CLIENT
    string FonlineDllName = "fonline_tla.dll@";
    string ArcDllName = "fonline_arc.dll@";
    #  endif
    #  ifdef __CLIENT
    string FonlineDllName = "fonline_tla_client.dll@";
    string ArcDllName = "fonline_arc_client.dll@";
    #  endif
    SetParameterGetBehaviour( ST_STRENGTH_DONT_USE, ArcDllName + "getSPECIALParam"                 );
    SetParameterGetBehaviour( ST_PERCEPTION_DONT_USE, ArcDllName + "getSPECIALParam"               );
    SetParameterGetBehaviour( ST_ENDURANCE_DONT_USE, ArcDllName + "getSPECIALParam"                );
    SetParameterGetBehaviour( ST_CHARISMA_DONT_USE, ArcDllName + "getSPECIALParam"                 );
    SetParameterGetBehaviour( ST_INTELLECT_DONT_USE, ArcDllName + "getSPECIALIntellecParam"        );
    SetParameterGetBehaviour( ST_AGILITY_DONT_USE, ArcDllName + "getSPECIALParam"                  );
    SetParameterGetBehaviour( ST_LUCK_DONT_USE, ArcDllName + "getSPECIALParam"                     );
    SetParameterGetBehaviour( ST_CURRENT_HP, ArcDllName + "getParam_Hp"                            );
    SetParameterGetBehaviour( ST_MAX_LIFE, ArcDllName + "getParam_MaxLife"                         );
    SetParameterGetBehaviour( ST_ACTION_POINTS, ArcDllName + "getParam_MaxAp"                      );
    SetParameterGetBehaviour( ST_CURRENT_AP, ArcDllName + "getParam_Ap"                            );
    SetParameterGetBehaviour( ST_MAX_MOVE_AP, ArcDllName + "getParam_MaxMoveAp"                    );
    SetParameterGetBehaviour( ST_MOVE_AP, ArcDllName + "getParam_MoveAp"                           );
    SetParameterGetBehaviour( ST_CARRY_WEIGHT, ArcDllName + "getParam_MaxWeight"                   );
    SetParameterGetBehaviour( ST_MELEE_DAMAGE, ArcDllName + "getParam_MeleeDmg"                    );
    SetParameterGetBehaviour( ST_SEQUENCE, ArcDllName + "getParam_Sequence"                        );
    SetParameterGetBehaviour( ST_HEALING_RATE, ArcDllName + "getParam_HealingRate"                 );
    SetParameterGetBehaviour( ST_CRITICAL_CHANCE, ArcDllName + "getParam_CriticalChance"           );
    SetParameterGetBehaviour( ST_ARMOR_CLASS, ArcDllName + "getParam_Ac"                           );
    SetParameterGetBehaviour( ST_POISON_RESISTANCE, ArcDllName + "getParam_PoisonResist"           );
    SetParameterGetBehaviour( ST_HP_PERCENT, ArcDllName     + "getParam_Hp_Percent"                );
    SetParameterGetBehaviour( ST_MANA_PERCENT, ArcDllName   + "getParam_Mana_Percent"              );
    SetParameterGetBehaviour( ST_NORMAL_RESIST, ArcDllName + "getParam_DamageResistance"           );
    for( uint i = TIMEOUT_BEGIN; i <= TIMEOUT_END; i++ )
        SetParameterGetBehaviour( i, ArcDllName + "getParam_Timeout"                               );
    // for(uint i = REPUTATION_BEGIN; i <= REPUTATION_END   ; i++) SetParameterGetBehaviour(i, FonlineDllName + "getParam_Reputation"       );
    // for(uint i = REPUTATION_BEGIN; i <= REPUTATION_END   ; i++) SetParameterChangeBehaviour(i, FonlineDllName + "changedParam_Reputation");

    #  ifndef __CLIENT
    SetParameterChangeBehaviour( ST_CURRENT_HP, "parameters@changedParam_Hp"                       );
    SetParameterChangeBehaviour( ST_EXPERIENCE, "parameters@changedParam_Experience"               );
    SetParameterChangeBehaviour( MODE_HIDE, "parameters@changedParam_Hide"                         );
    SetParameterChangeBehaviour( TRAIT_FAST_SHOT, "parameters@changedParam_FastShot"               );
    SetParameterDialogGetBehaviour( ST_INTELLECT, "parameters@getParamDialog_Intellect"            );
    for( uint i = REPUTATION_BEGIN; i <= REPUTATION_END; i++ )
        SetParameterDialogGetBehaviour( i, "parameters@getParamDialog_Reputation"                  );
    #  endif
    #  ifdef __CLIENT
    // for(uint i=GOOD_EVIL_LIST_BEGIN;i<=GOOD_EVIL_LIST_END;i++) SetParameterChangeBehaviour(i,"parameters@changedParam_GoodEvilList"); (not used)
    SetParameterChangeBehaviour( ST_LEVEL, "parameters@changedParam_Level"                         );
    SetParameterChangeBehaviour( ST_EXPERIENCE, "parameters@changedParam_Experience"               );
    SetParameterChangeBehaviour( ST_UNSPENT_PERKS, "parameters@changedParam_UnspentPerks"          );
    #  endif

    // / статы
    for( uint i = ST_STRENGTH; i <= ST_BIO; i++ )
        SetRegistrationParameter( i, true );

    SetRegistrationParameter( ST_FREE_POINTS, true );
    SetRegistrationParameter( ST_AGE, true );
    SetRegistrationParameter( ST_GENDER, true );
    SetRegistrationParameter( ST_RACE, true );

    // скилы
    for( int i = SK_BOW; i <= SK_TEMPORAL; i++ )
        SetRegistrationParameter( i, true );

    // / New slots allow here
    AllowSlot( SLOT_BOOTS, "InvBoots" );
    AllowSlot( SLOT_HELMET, "InvHelmet" );
    AllowSlot( SLOT_GLOVES, "InvGloves" );
    AllowSlot( SLOT_RING, "InvRing" );
    AllowSlot( SLOT_RING2, "InvRing2" );
    AllowSlot( SLOT_SHIELD, "InvShield" );
    AllowSlot( SLOT_AMULET, "InvAmulet" );
    
    // Valid name letters
    __ValidNameLettersCommon = "_ .-1234567890";
    __ValidNameLettersCulture1 = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz";
    __ValidNameLettersCulture2 = "АаБбВвГгДдЕеЁёЖжЗзИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЪъЫыЬьЭэЮюЯя";

    // / Geometry
    InitializeGeometry();
}

# endif // !__MAPPER

// /
// / Mapper initialization
// /

# ifdef __MAPPER

void InitializeGame() // Export
{
    __RoofAlpha             = 200;
    __SpritesZoomMax        = 10.0f;
    __SpritesZoomMin        = 0.2f;
    __Anim2CombatBegin      = ANIM2_BEGIN_COMBAT;
    __Anim2CombatIdle       = ANIM2_IDLE_COMBAT;
    __Anim2CombatEnd        = ANIM2_END_COMBAT;
    __SplitTilesCollection  = false;
    InitializeGeometry();
}

# endif // __MAPPER

// /
// / Geometry
// /

void InitializeGeometry()
{
    // Geometry customization
    // GEOMETRY_FALLOUT
    // GEOMETRY_TACTICS
    // GEOMETRY_ARCANUM
    __GeometryType = GEOMETRY_ARCANUM;

    // __MapHexagonal     true - hexagonal, false - square;
    // __MapHexWidth      hex/square width;
    // __MapHexHeight     hex/square height;
    // __MapHexLineHeight hex/square line height;
    // __MapTileOffsX/Y   tile default offsets;
    // __MapRoofOffsX/Y   roof default offsets;
    // __MapRoofSkipSize  default length (in hexes/squares) of roof tiles;
    // __MapCameraAngle   angle for 3d critters rendering;
    // __MapSmoothPath    enable pathfinding path smoothing;
    // __MapDataPrefix    path and prefix for names used for geometry sprites.

    switch( __GeometryType )
    {
    case GEOMETRY_FALLOUT:
        __MapHexagonal     = true;
        __MapHexWidth      = 32;
        __MapHexHeight     = 16;
        __MapHexLineHeight = 12;
        __MapTileOffsX     = -8;
        __MapTileOffsY     = 34;
        __MapRoofOffsX     = -8;
        __MapRoofOffsY     = -64;
        __MapRoofSkipSize  = 2;
        __MapCameraAngle   = 25.7f;
        __MapSmoothPath    = true;
        __MapDataPrefix    = "art/geometry/fallout_";
        break;

    case GEOMETRY_TACTICS:
        __MapHexagonal     = false;
        __MapHexWidth      = 36;
        __MapHexHeight     = 18;
        __MapHexLineHeight = 9;
        __MapTileOffsX     = 18;
        __MapTileOffsY     = 18;
        __MapRoofOffsX     = 18;
        __MapRoofOffsY     = -72;
        __MapRoofSkipSize  = 2;
        __MapCameraAngle   = 30.0f;
        __MapSmoothPath    = true;
        __MapDataPrefix    = "art/geometry/tactics_";
        break;

    case GEOMETRY_ARCANUM:
        __MapHexagonal     = false;
        __MapHexWidth      = 78;
        __MapHexHeight     = 40;
        __MapHexLineHeight = 20;
        __MapTileOffsX     = 39;
        __MapTileOffsY     = 40;
        __MapRoofOffsX     = -82;
        __MapRoofOffsY     = -180;
        __MapRoofSkipSize  = 4;
        __MapCameraAngle   = 30.0f;
        __MapSmoothPath    = true;
        __MapDataPrefix    = "art/geometry/arcanum_";
        break;

    default:
        Log( "Wrong geometry type value." );
        break;
    }
}
